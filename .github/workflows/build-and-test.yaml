name: build-test-strategy-service
run-name: Build and test for strategy service
on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Source code checkout
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'corretto'
        architecture: x64
    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2
    - name: Execute Gradle build
      run: ./gradlew build
    - name: Add coverage to PR
      id: jacoco
      if: ${{ github.event_name == 'pull_request' }}
      uses: madrapps/jacoco-report@v1.3
      with:
        paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 90
  slack-failure-notification:
    needs: build-and-test
    if: ${{ always() && github.ref_name == 'main' && contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    steps:
      - name: Send a notification to Github channel
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: '#github_failure'
          payload: |
            {
              "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  trivy:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Code checkout
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'corretto'
          architecture: x64
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
      - name: Execute Gradle dependecy lock
        run: ./gradlew dependencies --write-locks
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH'
      - name: Generate SBOM
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          format: 'cyclonedx'
          output: 'cyclonedx.json'
      - name: Upload BOM to Dependency Track
        run: |
          curl -X "POST" "http://202.138.30.211:60003/api/v1/bom" \
          -H 'Content-Type: multipart/form-data' \
          -H 'X-Api-Key: 4C1lnJV3hE6v8hQWTPmRFawUdxoRruox' \
          -F "project=cd20c602-64d3-48cc-972c-c298f1afa07b" \
          -F "bom=$(cat cyclonedx.json)"
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'      
          