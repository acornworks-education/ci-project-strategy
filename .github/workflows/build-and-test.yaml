name: build-test-strategy-service
run-name: Build and test for strategy service
on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Source code checkout
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'corretto'
        architecture: x64
    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2
    - name: Execute Gradle build
      run: ./gradlew build
    - name: Add coverage to PR
      id: jacoco
      if: ${{ github.event_name == 'pull_request' }}
      uses: madrapps/jacoco-report@v1.3
      with:
        paths: ${{ github.workspace }}/build/reports/jacoco/test/jacocoTestReport.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        min-coverage-overall: 90
    - name: Archive container related files
      uses: actions/upload-artifact@v3
      with:
        name: build-artifact
        retention-days: 1
        path: |
          build/libs/projectset-*.jar
          src/main/resources/application.yaml
          Dockerfile
  conftest:
    runs-on: ubuntu-latest
    needs: build-and-test
    container: openpolicyagent/conftest:latest
    steps:
    - name: Source code checkout
      uses: actions/checkout@v3
    - name: Validate Terraform policy
      run: |
        conftest pull git::https://github.com/rallyhealth/conftest-policy-packs.git//policies
        conftest test -p ./policy --all-namespaces -o github ./deploy/terraform/*.tf
    - name: Validate Kubernetes policy
      run: |
        conftest test --update github.com/instrumenta/policies.git//kubernetes -o github ./deploy/k8s/deployment.yaml
  trufflehog:
    runs-on: ubuntu-latest
    needs: build-and-test
    container: trufflesecurity/trufflehog:latest
    steps:
    - name: Source code checkout
      uses: actions/checkout@v3
    - name: TruffleHog Scan
      run: trufflehog filesystem --directory=. --fail --only-verified
  infracost:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-duration-seconds: 1200        
    - name: Setup Infracost
      uses: infracost/actions/setup@v2
      with:
        api-key: ${{ secrets.INFRACOST_API_KEY }}
    - name: Configure Infracost API endpoint
      run: infracost configure set pricing_api_endpoint ${{ secrets.INFRACOST_API_ENDPOINT }}
    - name: Source code checkout for base branch
      uses: actions/checkout@v3
      if: ${{ github.event_name == 'pull_request' }}
      with:
        ref: ${{ github.event.pull_request.base.ref }}
    - name: Generate cost estimation baseline
      run: |
        if [ -f "./deploy/terraform/main.tf" ]; then
          infracost breakdown --path=./deploy/terraform --format=json --out-file=/tmp/infracost-base.json
        fi        
    - name: Source code checkout for PR branch
      uses: actions/checkout@v3
    - name: Generate Infracost diff
      run: |
        if [ -f "/tmp/infracost-base.json" ]; then
          infracost diff --path=./deploy/terraform --format=json --compare-to=/tmp/infracost-base.json --out-file=/tmp/infracost.json
        else
          infracost breakdown --path=./deploy/terraform --format=json --out-file=/tmp/infracost.json
        fi
    - name: Post Infracost comment
      run: infracost comment github --path=/tmp/infracost.json --repo=$GITHUB_REPOSITORY --github-token=${{github.token}} --pull-request=${{github.event.pull_request.number}} --behavior=update
  sonarqube:
    needs:
      - conftest
      - infracost
      - trufflehog
    runs-on: ubuntu-latest
    steps:
      - name: Source code checkout
        uses: actions/checkout@v3
      - name: Set SonarQube project name with Custom Action
        id: sname
        uses: ./actions/sonarqube-project-name        
      - run: |
          echo "Project name: ${{steps.sname.outputs.sonarqube-project-name}}"
      - name: Create a SonarQube project
        run: |
          curl -u ${{secrets.SONARQUBE_TOKEN}} -X POST -H "Content-Type: application/x-www-form-urlencoded" "${{secrets.SONARQUBE_API_URL}}/api/projects/create" -d "name=${{steps.sname.outputs.sonarqube-project-name}}&project=${{env.sonarqube_project_name}}"
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'corretto'
          architecture: x64
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
      - name: Execute Gradle build
        run: ./gradlew build -x test      
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_API_URL }}
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=${{env.sonarqube_project_name}}
            -Dsonar.java.binaries=./build/classes/java
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONARQUBE_API_URL }}
      - name: Delete a SonarQube project
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          curl -u ${{secrets.SONARQUBE_TOKEN}} -X POST -H "Content-Type: application/x-www-form-urlencoded" "${{secrets.SONARQUBE_API_URL}}/api/projects/delete" -d "project=${{env.sonarqube_project_name}}"
  trivy:
    needs:
      - conftest
      - infracost
      - trufflehog
    runs-on: ubuntu-latest
    steps:
      - name: Source code checkout
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'corretto'
          architecture: x64
      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2
      - name: Execute Gradle dependency lock
        run: ./gradlew dependencies --write-locks
      - name: Run Trivy vulnerability scanner with Custom Action
        uses: ./actions/trivy-scan
        with: 
          scan-type: fs
          api-key: ${{secrets.DT_API_KEY}}
          project-key: ${{secrets.DT_PROJECT_KEY}}
          api-url: ${{secrets.DT_API_URL}}
  container:
    runs-on: ubuntu-latest
    needs:
      - sonarqube
      - trivy
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/strategy
          tags: latest
      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
        with:
          cosign-release: 'v1.13.1'
      - name: Sign an image
        env:
          PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          IMAGE_NAME=${{ env.REGISTRY }}/${{ github.repository_owner }}/strategy:latest
          echo "image_name=${IMAGE_NAME}" >> $GITHUB_ENV
          echo $PRIVATE_KEY | base64 -d > cosign.key
          cosign sign --key cosign.key $IMAGE_NAME
      - name: Pull image
        run: docker pull ${{ env.image_name }}
      - name: Run Trivy vulnerability scanner with Custom Action
        uses: ./actions/trivy-scan
        with: 
          scan-type: image
          trivy-ref: ${{ env.image_name }}
          api-key: ${{secrets.DT_API_KEY}}
          project-key: ${{secrets.DT_PROJECT_KEY}}
          api-url: ${{secrets.DT_API_URL}}
  slack-failure-notification:
    needs:
      - conftest
      - infracost
      - trufflehog
      - trivy
      - sonarqube
      - build-and-test
      - container
    if: ${{ always() && github.ref_name == 'main' && contains(needs.*.result, 'failure') }}
    runs-on: ubuntu-latest
    steps:
      - name: Send a notification to Github channel
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: '#github_failure'
          payload: |
            {
              "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK